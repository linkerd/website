- Description: |-
    Check the Linkerd installation for potential problems.

    The check command will perform a series of checks to validate that the linkerd
    CLI and control plane are configured correctly. If the command encounters a
    failure it will print additional information about the failure and exit with a
    non-zero exit code.
  Example: |2-
      # Check that the Linkerd control plane is up and running
      linkerd check

      # Check that the Linkerd control plane can be installed in the "test" namespace
      linkerd check --pre --linkerd-namespace test

      # Check that the Linkerd data plane proxies in the "app" namespace are up and running
      linkerd check --proxy --namespace app
  InheritedOptions: null
  Name: check
  Options:
  - DefaultValue: ""
    Name: expected-version
    Shorthand: ""
    Usage: |
      Overrides the version used when checking if Linkerd is running the latest version (mostly for testing)
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for check
  - DefaultValue: ""
    Name: linkerd-cni-enabled
    Shorthand: ""
    Usage: |
      When running pre-installation checks (--pre), assume the linkerd-cni plugin is already installed, and a NET_ADMIN check is not needed
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: |
      Namespace to use for --proxy checks (default: all namespaces)
  - DefaultValue: ""
    Name: pre
    Shorthand: ""
    Usage: |
      Only run pre-installation checks, to determine if the control plane can be installed
  - DefaultValue: ""
    Name: proxy
    Shorthand: ""
    Usage: |
      Only run data-plane checks, to determine if the data plane is healthy
  - DefaultValue: ""
    Name: wait
    Shorthand: ""
    Usage: Maximum allowed time for all tests to pass
  SeeAlso: null
  Synopsis: Check the Linkerd installation for potential problems
- Description: |
    Output shell completion code for the specified shell (bash or zsh).
  Example: |2-
      # bash <= 3.2
      source /dev/stdin <<< "$(linkerd completion bash)"

      # bash >= 4.0
      source <(linkerd completion bash)

      # bash <= 3.2 on osx
      brew install bash-completion # ensure you have bash-completion 1.3+
      linkerd completion bash > $(brew --prefix)/etc/bash_completion.d/linkerd

      # bash >= 4.0 on osx
      brew install bash-completion@2
      linkerd completion bash > $(brew --prefix)/etc/bash_completion.d/linkerd

      # zsh
      source <(linkerd completion zsh)

      # zsh on osx / oh-my-zsh
      linkerd completion zsh > "${fpath[1]}/_linkerd"
  InheritedOptions: null
  Name: completion
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for completion
  SeeAlso: null
  Synopsis: |
    Output shell completion code for the specified shell (bash or zsh)
- Description: ""
  Example: ""
  InheritedOptions: null
  Name: dashboard
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for dashboard
  - DefaultValue: ""
    Name: port
    Shorthand: p
    Usage: |
      The local port on which to serve requests (when set to 0, a random port will be used)
  - DefaultValue: ""
    Name: show
    Shorthand: ""
    Usage: |
      Open a dashboard in a browser or show URLs in the CLI (one of: linkerd, grafana, url)
  - DefaultValue: ""
    Name: wait
    Shorthand: ""
    Usage: |
      Wait for dashboard to become available if it's not available when the command is run
  SeeAlso: null
  Synopsis: Open the Linkerd dashboard in a web browser
- Description: |-
    Introspect Linkerd's service discovery state.

    This command provides debug information about the internal state of the
    control-plane's destination container. Note that this cache of service discovery
    information is populated on-demand via linkerd-proxy requests. This command
    will return "No endpoints found." until a linkerd-proxy begins routing
    requests.
  Example: |2-
      # get all endpoints
      linkerd endpoints

      # get endpoints in the emojivoto namespace
      linkerd endpoints -n emojivoto

      # get all endpoints in json
      linkerd endpoints -o json
  InheritedOptions: null
  Name: endpoints
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for endpoints
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: |
      Namespace of the specified endpoints (default: all namespaces)
  - DefaultValue: ""
    Name: output
    Shorthand: o
    Usage: 'Output format; one of: "table" or "json"'
  SeeAlso: null
  Synopsis: Introspect Linkerd's service discovery state
- Description: |-
    Display one or many mesh resources.

    Only pod resources (aka pods, po) are supported.
  Example: |2-
      # get all pods
      linkerd get pods

      # get pods from namespace linkerd
      linkerd get pods --namespace linkerd
  InheritedOptions: null
  Name: get
  Options:
  - DefaultValue: ""
    Name: all-namespaces
    Shorthand: ""
    Usage: |
      If present, returns pods across all namespaces, ignoring the "--namespace" flag
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for get
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of pods
  SeeAlso: null
  Synopsis: Display one or many mesh resources
- Description: |-
    Add the Linkerd proxy to a Kubernetes config.

    You can inject resources contained in a single file, inside a folder and its
    sub-folders, or coming from stdin.
  Example: |2-
      # Inject all the deployments in the default namespace.
      kubectl get deploy -o yaml | linkerd inject - | kubectl apply -f -

      # Download a resource and inject it through stdin.
      curl http://url.to/yml | linkerd inject - | kubectl apply -f -

      # Inject all the resources inside a folder and its sub-folders.
      linkerd inject <folder> | kubectl apply -f -
  InheritedOptions: null
  Name: inject
  Options:
  - DefaultValue: ""
    Name: admin-port
    Shorthand: ""
    Usage: Proxy port to serve metrics on
  - DefaultValue: ""
    Name: control-port
    Shorthand: ""
    Usage: Proxy port to use for control
  - DefaultValue: ""
    Name: disable-identity
    Shorthand: ""
    Usage: Disables resources from participating in TLS identity
  - DefaultValue: ""
    Name: enable-external-profiles
    Shorthand: ""
    Usage: Enable service profiles for non-Kubernetes services
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for inject
  - DefaultValue: ""
    Name: ignore-cluster
    Shorthand: ""
    Usage: |
      Ignore the current Kubernetes cluster when checking for existing cluster configuration (default false)
  - DefaultValue: ""
    Name: image-pull-policy
    Shorthand: ""
    Usage: Docker image pull policy
  - DefaultValue: ""
    Name: inbound-port
    Shorthand: ""
    Usage: Proxy port to use for inbound traffic
  - DefaultValue: ""
    Name: init-image
    Shorthand: ""
    Usage: Linkerd init container image name
  - DefaultValue: ""
    Name: linkerd-version
    Shorthand: v
    Usage: Tag to be used for Linkerd images
  - DefaultValue: ""
    Name: outbound-port
    Shorthand: ""
    Usage: Proxy port to use for outbound traffic
  - DefaultValue: ""
    Name: proxy-cpu-limit
    Shorthand: ""
    Usage: Maximum amount of CPU units that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-cpu-request
    Shorthand: ""
    Usage: Amount of CPU units that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-image
    Shorthand: ""
    Usage: Linkerd proxy container image name
  - DefaultValue: ""
    Name: proxy-log-level
    Shorthand: ""
    Usage: Log level for the proxy
  - DefaultValue: ""
    Name: proxy-memory-limit
    Shorthand: ""
    Usage: Maximum amount of Memory that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-memory-request
    Shorthand: ""
    Usage: Amount of Memory that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-uid
    Shorthand: ""
    Usage: Run the proxy under this user ID
  - DefaultValue: ""
    Name: registry
    Shorthand: ""
    Usage: Docker registry to pull images from
  - DefaultValue: ""
    Name: skip-inbound-ports
    Shorthand: ""
    Usage: |
      Ports that should skip the proxy and send directly to the application
  - DefaultValue: ""
    Name: skip-outbound-ports
    Shorthand: ""
    Usage: Outbound ports that should skip the proxy
  SeeAlso: null
  Synopsis: Add the Linkerd proxy to a Kubernetes config
- Description: Output Kubernetes configs to install Linkerd.
  Example: ""
  InheritedOptions: null
  Name: install
  Options:
  - DefaultValue: ""
    Name: admin-port
    Shorthand: ""
    Usage: Proxy port to serve metrics on
  - DefaultValue: ""
    Name: control-port
    Shorthand: ""
    Usage: Proxy port to use for control
  - DefaultValue: ""
    Name: controller-log-level
    Shorthand: ""
    Usage: Log level for the controller and web components
  - DefaultValue: ""
    Name: controller-replicas
    Shorthand: ""
    Usage: Replicas of the controller to deploy
  - DefaultValue: ""
    Name: controller-uid
    Shorthand: ""
    Usage: Run the control plane components under this user ID
  - DefaultValue: ""
    Name: disable-h2-upgrade
    Shorthand: ""
    Usage: |
      Prevents the controller from instructing proxies to perform transparent HTTP/2 upgrading (default false)
  - DefaultValue: ""
    Name: enable-external-profiles
    Shorthand: ""
    Usage: Enable service profiles for non-Kubernetes services
  - DefaultValue: ""
    Name: ha
    Shorthand: ""
    Usage: |
      Experimental: Enable HA deployment config for the control plane (default false)
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for install
  - DefaultValue: ""
    Name: identity-clock-skew-allowance
    Shorthand: ""
    Usage: |
      The amount of time to allow for clock skew within a Linkerd cluster
  - DefaultValue: ""
    Name: identity-issuance-lifetime
    Shorthand: ""
    Usage: |
      The amount of time for which the Identity issuer should certify identity
  - DefaultValue: ""
    Name: identity-issuer-certificate-file
    Shorthand: ""
    Usage: |
      A path to a PEM-encoded file containing the Linkerd Identity issuer certificate (generated by default)
  - DefaultValue: ""
    Name: identity-issuer-key-file
    Shorthand: ""
    Usage: |
      A path to a PEM-encoded file containing the Linkerd Identity issuer private key (generated by default)
  - DefaultValue: ""
    Name: identity-trust-anchors-file
    Shorthand: ""
    Usage: |
      A path to a PEM-encoded file containing Linkerd Identity trust anchors (generated by default)
  - DefaultValue: ""
    Name: identity-trust-domain
    Shorthand: ""
    Usage: Configures the name suffix used for identities.
  - DefaultValue: ""
    Name: ignore-cluster
    Shorthand: ""
    Usage: |
      Ignore the current Kubernetes cluster when checking for existing cluster configuration (default false)
  - DefaultValue: ""
    Name: image-pull-policy
    Shorthand: ""
    Usage: Docker image pull policy
  - DefaultValue: ""
    Name: inbound-port
    Shorthand: ""
    Usage: Proxy port to use for inbound traffic
  - DefaultValue: ""
    Name: init-image
    Shorthand: ""
    Usage: Linkerd init container image name
  - DefaultValue: ""
    Name: linkerd-cni-enabled
    Shorthand: ""
    Usage: |
      Experimental: Omit the proxy-init container when injecting the proxy; requires the linkerd-cni plugin to already be installed
  - DefaultValue: ""
    Name: linkerd-version
    Shorthand: v
    Usage: Tag to be used for Linkerd images
  - DefaultValue: ""
    Name: outbound-port
    Shorthand: ""
    Usage: Proxy port to use for outbound traffic
  - DefaultValue: ""
    Name: proxy-auto-inject
    Shorthand: ""
    Usage: |
      Enable proxy sidecar auto-injection via a webhook (default false)
  - DefaultValue: ""
    Name: proxy-cpu-limit
    Shorthand: ""
    Usage: Maximum amount of CPU units that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-cpu-request
    Shorthand: ""
    Usage: Amount of CPU units that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-image
    Shorthand: ""
    Usage: Linkerd proxy container image name
  - DefaultValue: ""
    Name: proxy-log-level
    Shorthand: ""
    Usage: Log level for the proxy
  - DefaultValue: ""
    Name: proxy-memory-limit
    Shorthand: ""
    Usage: Maximum amount of Memory that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-memory-request
    Shorthand: ""
    Usage: Amount of Memory that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-uid
    Shorthand: ""
    Usage: Run the proxy under this user ID
  - DefaultValue: ""
    Name: registry
    Shorthand: ""
    Usage: Docker registry to pull images from
  - DefaultValue: ""
    Name: skip-inbound-ports
    Shorthand: ""
    Usage: |
      Ports that should skip the proxy and send directly to the application
  - DefaultValue: ""
    Name: skip-outbound-ports
    Shorthand: ""
    Usage: Outbound ports that should skip the proxy
  SeeAlso: null
  Synopsis: Output Kubernetes configs to install Linkerd
- Description: |-
    Output Kubernetes configs to install Linkerd CNI (experimental).

    This command installs a DaemonSet into the Linkerd control plane. The DaemonSet
    copies the necessary linkerd-cni plugin binaries and configs onto the host. It
    assumes that the 'linkerd install' command will be executed with the
    '--linkerd-cni-enabled' flag. This command needs to be executed before the
    'linkerd install --linkerd-cni-enabled' command.
  Example: ""
  InheritedOptions: null
  Name: install-cni
  Options:
  - DefaultValue: ""
    Name: admin-port
    Shorthand: ""
    Usage: Proxy port to serve metrics on
  - DefaultValue: ""
    Name: cni-image
    Shorthand: ""
    Usage: Image for the cni-plugin.
  - DefaultValue: ""
    Name: cni-log-level
    Shorthand: ""
    Usage: Log level for the cni-plugin.
  - DefaultValue: ""
    Name: control-port
    Shorthand: ""
    Usage: Proxy port to use for control
  - DefaultValue: ""
    Name: dest-cni-bin-dir
    Shorthand: ""
    Usage: Directory on the host where the CNI plugin binaries reside.
  - DefaultValue: ""
    Name: dest-cni-net-dir
    Shorthand: ""
    Usage: |
      Directory on the host where the CNI configuration will be placed.
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for install-cni
  - DefaultValue: ""
    Name: inbound-port
    Shorthand: ""
    Usage: Proxy port to use for inbound traffic
  - DefaultValue: ""
    Name: linkerd-version
    Shorthand: v
    Usage: Tag to be used for Linkerd images
  - DefaultValue: ""
    Name: outbound-port
    Shorthand: ""
    Usage: Proxy port to use for outbound traffic
  - DefaultValue: ""
    Name: proxy-uid
    Shorthand: ""
    Usage: Run the proxy under this user ID
  - DefaultValue: ""
    Name: registry
    Shorthand: ""
    Usage: Docker registry to pull images from
  - DefaultValue: ""
    Name: skip-inbound-ports
    Shorthand: ""
    Usage: |
      Ports that should skip the proxy and send directly to the application
  - DefaultValue: ""
    Name: skip-outbound-ports
    Shorthand: ""
    Usage: Outbound ports that should skip the proxy
  SeeAlso: null
  Synopsis: |
    Output Kubernetes configs to install Linkerd CNI (experimental)
- Description: |-
    Output Kubernetes configs to install Linkerd Service Profiles.

    This command installs Service Profiles into the Linkerd control plane. A
    cluster-wide Linkerd control-plane is a prerequisite. To confirm Service Profile
    support, verify "kubectl api-versions" outputs "linkerd.io/v1alpha1".
  Example: ""
  InheritedOptions: null
  Name: install-sp
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for install-sp
  SeeAlso: null
  Synopsis: |
    Output Kubernetes configs to install Linkerd Service Profiles
- Description: Tail logs from containers in the Linkerd control plane.
  Example: |2
      # Tail logs from all containers in the prometheus control plane component
      linkerd logs --control-plane-component prometheus

      # Tail logs from the linkerd-proxy container in the grafana control plane component
      linkerd logs --control-plane-component grafana --container linkerd-proxy

      # Tail logs from the linkerd-proxy container in the controller component beginning with the last two lines
      linkerd logs --control-plane-component controller --container linkerd-proxy --tail 2

      # Tail logs from the linkerd-proxy container in the controller component showing timestamps for each line
      linkerd logs --control-plane-component controller --container linkerd-proxy --timestamps
  InheritedOptions: null
  Name: logs
  Options:
  - DefaultValue: ""
    Name: container
    Shorthand: c
    Usage: |
      Tail logs from the specified container. Options are 'public-api', 'destination', 'tap', 'prometheus', 'grafana' or 'linkerd-proxy'
  - DefaultValue: ""
    Name: control-plane-component
    Shorthand: ""
    Usage: |
      Tail logs from the specified control plane component. Default value (empty string) causes this command to tail logs from all resources marked with the 'linkerd.io/control-plane-component' label selector
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for logs
  - DefaultValue: ""
    Name: no-color
    Shorthand: "n"
    Usage: Disable colorized output
  - DefaultValue: ""
    Name: since
    Shorthand: s
    Usage: Duration of how far back logs should be retrieved
  - DefaultValue: ""
    Name: tail
    Shorthand: ""
    Usage: |
      Last number of log lines to show for a given container. -1 does not show previous log lines
  - DefaultValue: ""
    Name: timestamps
    Shorthand: t
    Usage: Print timestamps for each given log line
  SeeAlso: null
  Synopsis: Tail logs from containers in the Linkerd control plane
- Description: |-
    Fetch metrics directly from Linkerd proxies.

      This command initiates a port-forward to a given pod or set of pods, and
      queries the /metrics endpoint on the Linkerd proxies.

      The RESOURCE argument specifies the target resource to query metrics for:
      (TYPE/NAME)

      Examples:

      * deploy/my-deploy
      * ds/my-daemonset
      * job/my-job
      * po/mypod1
      * rc/my-replication-controller
      * sts/my-statefulset

      Valid resource types include:

      * daemonsets
      * deployments
      * jobs
      * pods
      * replicasets
      * replicationcontrollers
      * statefulsets
  Example: |2-
      # Get metrics from pod-foo-bar in the default namespace.
      linkerd metrics po/pod-foo-bar

      # Get metrics from the web deployment in the emojivoto namespace.
      linkerd metrics -n emojivoto deploy/web

      # Get metrics from the linkerd-controller pod in the linkerd namespace.
      linkerd metrics -n linkerd $(
        kubectl --namespace linkerd get pod \
          --selector linkerd.io/control-plane-component=controller \
          --output name
      )
  InheritedOptions: null
  Name: metrics
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for metrics
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of resource
  SeeAlso: null
  Synopsis: Fetch metrics directly from Linkerd proxies
- Description: Output service profile config for Kubernetes.
  Example: |2
      # Output a basic template to apply after modification.
      linkerd profile -n emoijvoto --template web-svc

      # Generate a profile from an OpenAPI specification.
      linkerd profile -n emojivoto --open-api web-svc.swagger web-svc

      # Generate a profile from a protobuf definition.
      linkerd profile -n emojivoto --proto Voting.proto vote-svc

      # Generate a profile by watching live traffic based off tap data.
      linkerd profile -n emojivoto web-svc --tap deploy/web --tap-duration 10s --tap-route-limit 5
  InheritedOptions: null
  Name: profile
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for profile
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of the service
  - DefaultValue: ""
    Name: open-api
    Shorthand: ""
    Usage: |
      Output a service profile based on the given OpenAPI spec file
  - DefaultValue: ""
    Name: proto
    Shorthand: ""
    Usage: |
      Output a service profile based on the given Protobuf spec file
  - DefaultValue: ""
    Name: tap
    Shorthand: ""
    Usage: |
      Output a service profile based on tap data for the given target resource
  - DefaultValue: ""
    Name: tap-duration
    Shorthand: ""
    Usage: |
      Duration over which tap data is collected (for example: "10s", "1m", "10m")
  - DefaultValue: ""
    Name: tap-route-limit
    Shorthand: ""
    Usage: Max number of routes to add to the profile
  - DefaultValue: ""
    Name: template
    Shorthand: ""
    Usage: Output a service profile template
  SeeAlso: null
  Synopsis: Output service profile config for Kubernetes
- Description: |-
    Display route stats.

    This command will only display traffic which is sent to a service that has a Service Profile defined.
  Example: |2-
      # Routes for the webapp service in the test namespace.
      linkerd routes service/webapp -n test

      # Routes for calls from the traffic deployment to the webapp service in the test namespace.
      linkerd routes deploy/traffic -n test --to svc/webapp
  InheritedOptions: null
  Name: routes
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for routes
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of the specified resource
  - DefaultValue: ""
    Name: output
    Shorthand: o
    Usage: 'Output format; one of: "table", "wide", or "json"'
  - DefaultValue: ""
    Name: time-window
    Shorthand: t
    Usage: 'Stat window (for example: "10s", "1m", "10m", "1h")'
  - DefaultValue: ""
    Name: to
    Shorthand: ""
    Usage: If present, shows outbound stats to the specified resource
  - DefaultValue: ""
    Name: to-namespace
    Shorthand: ""
    Usage: |
      Sets the namespace used to lookup the "--to" resource; by default the current "--namespace" is used
  SeeAlso: null
  Synopsis: Display route stats
- Description: |-
    Display traffic stats about one or many resources.

      The RESOURCES argument specifies the target resource(s) to aggregate stats over:
      (TYPE [NAME] | TYPE/NAME)
      or (TYPE [NAME1] [NAME2]...)
      or (TYPE1/NAME1 TYPE2/NAME2...)

      Examples:
      * deploy
      * deploy/my-deploy
      * deploy/ po/
      * ds/my-daemonset
      * job/my-job
      * ns/my-ns
      * po/mypod1 rc/my-replication-controller
      * po mypod1 mypod2
      * rc/my-replication-controller
      * sts/my-statefulset
      * authority
      * au/my-authority
      * all

      Valid resource types include:
      * daemonsets
      * deployments
      * namespaces
      * jobs
      * pods
      * replicationcontrollers
      * statefulsets
      * authorities (not supported in --from)
      * services (only supported if a --from is also specified, or as a --to)
      * all (all resource types, not supported in --from or --to)

    This command will hide resources that have completed, such as pods that are in the Succeeded or Failed phases.
    If no resource name is specified, displays stats about all resources of the specified RESOURCETYPE
  Example: |2-
      # Get all deployments in the test namespace.
      linkerd stat deployments -n test

      # Get the hello1 replication controller in the test namespace.
      linkerd stat replicationcontrollers hello1 -n test

      # Get all namespaces.
      linkerd stat namespaces

      # Get all inbound stats to the web deployment.
      linkerd stat deploy/web

      # Getl all inbound stats to the pod1 and pod2 pods
      linkerd stat po pod1 pod2

      # Getl all inbound stats to the pod1 pod and the web deployment
      linkerd stat po/pod1 deploy/web

      # Get all pods in all namespaces that call the hello1 deployment in the test namesapce.
      linkerd stat pods --to deploy/hello1 --to-namespace test --all-namespaces

      # Get all pods in all namespaces that call the hello1 service in the test namesapce.
      linkerd stat pods --to svc/hello1 --to-namespace test --all-namespaces

      # Get all services in all namespaces that receive calls from hello1 deployment in the test namespace.
      linkerd stat services --from deploy/hello1 --from-namespace test --all-namespaces

      # Get all namespaces that receive traffic from the default namespace.
      linkerd stat namespaces --from ns/default

      # Get all inbound stats to the test namespace.
      linkerd stat ns/test
  InheritedOptions: null
  Name: stat
  Options:
  - DefaultValue: ""
    Name: all-namespaces
    Shorthand: ""
    Usage: |
      If present, returns stats across all namespaces, ignoring the "--namespace" flag
  - DefaultValue: ""
    Name: from
    Shorthand: ""
    Usage: |
      If present, restricts outbound stats from the specified resource name
  - DefaultValue: ""
    Name: from-namespace
    Shorthand: ""
    Usage: |
      Sets the namespace used from lookup the "--from" resource; by default the current "--namespace" is used
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for stat
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of the specified resource
  - DefaultValue: ""
    Name: output
    Shorthand: o
    Usage: 'Output format; one of: "table" or "json" or "wide"'
  - DefaultValue: ""
    Name: time-window
    Shorthand: t
    Usage: 'Stat window (for example: "10s", "1m", "10m", "1h")'
  - DefaultValue: ""
    Name: to
    Shorthand: ""
    Usage: |
      If present, restricts outbound stats to the specified resource name
  - DefaultValue: ""
    Name: to-namespace
    Shorthand: ""
    Usage: |
      Sets the namespace used to lookup the "--to" resource; by default the current "--namespace" is used
  SeeAlso: null
  Synopsis: Display traffic stats about one or many resources
- Description: |-
    Listen to a traffic stream.

      The RESOURCE argument specifies the target resource(s) to tap:
      (TYPE [NAME] | TYPE/NAME)

      Examples:
      * deploy
      * deploy/my-deploy
      * deploy my-deploy
      * ds/my-daemonset
      * job/my-job
      * ns/my-ns
      * sts
      * sts/my-statefulset

      Valid resource types include:
      * daemonsets
      * deployments
      * jobs
      * namespaces
      * pods
      * replicationcontrollers
      * statefulsets
      * services (only supported as a --to resource)
  Example: |2-
      # tap the web deployment in the default namespace
      linkerd tap deploy/web

      # tap the web-dlbvj pod in the default namespace
      linkerd tap pod/web-dlbvj

      # tap the test namespace, filter by request to prod namespace
      linkerd tap ns/test --to ns/prod
  InheritedOptions: null
  Name: tap
  Options:
  - DefaultValue: ""
    Name: authority
    Shorthand: ""
    Usage: Display requests with this :authority
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for tap
  - DefaultValue: ""
    Name: max-rps
    Shorthand: ""
    Usage: Maximum requests per second to tap.
  - DefaultValue: ""
    Name: method
    Shorthand: ""
    Usage: Display requests with this HTTP method
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of the specified resource
  - DefaultValue: ""
    Name: output
    Shorthand: o
    Usage: 'Output format. One of: wide'
  - DefaultValue: ""
    Name: path
    Shorthand: ""
    Usage: Display requests with paths that start with this prefix
  - DefaultValue: ""
    Name: scheme
    Shorthand: ""
    Usage: Display requests with this scheme
  - DefaultValue: ""
    Name: to
    Shorthand: ""
    Usage: Display requests to this resource
  - DefaultValue: ""
    Name: to-namespace
    Shorthand: ""
    Usage: |
      Sets the namespace used to lookup the "--to" resource; by default the current "--namespace" is used
  SeeAlso: null
  Synopsis: Listen to a traffic stream
- Description: |-
    Display sorted information about live traffic.

      The RESOURCE argument specifies the target resource(s) to view traffic for:
      (TYPE [NAME] | TYPE/NAME)

      Examples:
      * deploy
      * deploy/my-deploy
      * deploy my-deploy
      * ds/my-daemonset
      * job/my-job
      * ns/my-ns
      * sts
      * sts/my-statefulset

      Valid resource types include:
      * daemonsets
      * deployments
      * jobs
      * namespaces
      * pods
      * replicationcontrollers
      * statefulsets
      * services (only supported as a --to resource)
  Example: |2-
      # display traffic for the web deployment in the default namespace
      linkerd top deploy/web

      # display traffic for the web-dlbvj pod in the default namespace
      linkerd top pod/web-dlbvj
  InheritedOptions: null
  Name: top
  Options:
  - DefaultValue: ""
    Name: authority
    Shorthand: ""
    Usage: Display requests with this :authority
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for top
  - DefaultValue: ""
    Name: hide-sources
    Shorthand: ""
    Usage: Hide the source column
  - DefaultValue: ""
    Name: max-rps
    Shorthand: ""
    Usage: Maximum requests per second to tap.
  - DefaultValue: ""
    Name: method
    Shorthand: ""
    Usage: Display requests with this HTTP method
  - DefaultValue: ""
    Name: namespace
    Shorthand: "n"
    Usage: Namespace of the specified resource
  - DefaultValue: ""
    Name: path
    Shorthand: ""
    Usage: Display requests with paths that start with this prefix
  - DefaultValue: ""
    Name: routes
    Shorthand: ""
    Usage: Display data per route instead of per path
  - DefaultValue: ""
    Name: scheme
    Shorthand: ""
    Usage: Display requests with this scheme
  - DefaultValue: ""
    Name: to
    Shorthand: ""
    Usage: Display requests to this resource
  - DefaultValue: ""
    Name: to-namespace
    Shorthand: ""
    Usage: |
      Sets the namespace used to lookup the "--to" resource; by default the current "--namespace" is used
  SeeAlso: null
  Synopsis: Display sorted information about live traffic
- Description: |-
    Remove the Linkerd proxy from a Kubernetes config.

    You can uninject resources contained in a single file, inside a folder and its
    sub-folders, or coming from stdin.
  Example: |2-
      # Uninject all the deployments in the default namespace.
      kubectl get deploy -o yaml | linkerd uninject - | kubectl apply -f -

      # Download a resource and uninject it through stdin.
      curl http://url.to/yml | linkerd uninject - | kubectl apply -f -

      # Uninject all the resources inside a folder and its sub-folders.
      linkerd uninject <folder> | kubectl apply -f -
  InheritedOptions: null
  Name: uninject
  Options:
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for uninject
  SeeAlso: null
  Synopsis: Remove the Linkerd proxy from a Kubernetes config
- Description: |-
    Output Kubernetes configs to upgrade an existing Linkerd control plane.

    Note that the default flag values for this command come from the Linkerd control
    plane. The default values displayed in the Flags section below only apply to the
    install command.
  Example: ""
  InheritedOptions: null
  Name: upgrade
  Options:
  - DefaultValue: ""
    Name: admin-port
    Shorthand: ""
    Usage: Proxy port to serve metrics on
  - DefaultValue: ""
    Name: control-port
    Shorthand: ""
    Usage: Proxy port to use for control
  - DefaultValue: ""
    Name: controller-log-level
    Shorthand: ""
    Usage: Log level for the controller and web components
  - DefaultValue: ""
    Name: controller-replicas
    Shorthand: ""
    Usage: Replicas of the controller to deploy
  - DefaultValue: ""
    Name: controller-uid
    Shorthand: ""
    Usage: Run the control plane components under this user ID
  - DefaultValue: ""
    Name: disable-h2-upgrade
    Shorthand: ""
    Usage: |
      Prevents the controller from instructing proxies to perform transparent HTTP/2 upgrading (default false)
  - DefaultValue: ""
    Name: enable-external-profiles
    Shorthand: ""
    Usage: Enable service profiles for non-Kubernetes services
  - DefaultValue: ""
    Name: ha
    Shorthand: ""
    Usage: |
      Experimental: Enable HA deployment config for the control plane (default false)
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for upgrade
  - DefaultValue: ""
    Name: identity-clock-skew-allowance
    Shorthand: ""
    Usage: |
      The amount of time to allow for clock skew within a Linkerd cluster
  - DefaultValue: ""
    Name: identity-issuance-lifetime
    Shorthand: ""
    Usage: |
      The amount of time for which the Identity issuer should certify identity
  - DefaultValue: ""
    Name: image-pull-policy
    Shorthand: ""
    Usage: Docker image pull policy
  - DefaultValue: ""
    Name: inbound-port
    Shorthand: ""
    Usage: Proxy port to use for inbound traffic
  - DefaultValue: ""
    Name: init-image
    Shorthand: ""
    Usage: Linkerd init container image name
  - DefaultValue: ""
    Name: linkerd-cni-enabled
    Shorthand: ""
    Usage: |
      Experimental: Omit the proxy-init container when injecting the proxy; requires the linkerd-cni plugin to already be installed
  - DefaultValue: ""
    Name: linkerd-version
    Shorthand: v
    Usage: Tag to be used for Linkerd images
  - DefaultValue: ""
    Name: outbound-port
    Shorthand: ""
    Usage: Proxy port to use for outbound traffic
  - DefaultValue: ""
    Name: proxy-auto-inject
    Shorthand: ""
    Usage: |
      Enable proxy sidecar auto-injection via a webhook (default false)
  - DefaultValue: ""
    Name: proxy-cpu-limit
    Shorthand: ""
    Usage: Maximum amount of CPU units that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-cpu-request
    Shorthand: ""
    Usage: Amount of CPU units that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-image
    Shorthand: ""
    Usage: Linkerd proxy container image name
  - DefaultValue: ""
    Name: proxy-log-level
    Shorthand: ""
    Usage: Log level for the proxy
  - DefaultValue: ""
    Name: proxy-memory-limit
    Shorthand: ""
    Usage: Maximum amount of Memory that the proxy sidecar can use
  - DefaultValue: ""
    Name: proxy-memory-request
    Shorthand: ""
    Usage: Amount of Memory that the proxy sidecar requests
  - DefaultValue: ""
    Name: proxy-uid
    Shorthand: ""
    Usage: Run the proxy under this user ID
  - DefaultValue: ""
    Name: registry
    Shorthand: ""
    Usage: Docker registry to pull images from
  - DefaultValue: ""
    Name: skip-inbound-ports
    Shorthand: ""
    Usage: |
      Ports that should skip the proxy and send directly to the application
  - DefaultValue: ""
    Name: skip-outbound-ports
    Shorthand: ""
    Usage: Outbound ports that should skip the proxy
  SeeAlso: null
  Synopsis: |
    Output Kubernetes configs to upgrade an existing Linkerd control plane
- Description: ""
  Example: ""
  InheritedOptions: null
  Name: version
  Options:
  - DefaultValue: ""
    Name: client
    Shorthand: ""
    Usage: Print the client version only
  - DefaultValue: ""
    Name: help
    Shorthand: h
    Usage: help for version
  - DefaultValue: ""
    Name: short
    Shorthand: ""
    Usage: Print the version number(s) only, with no additional output
  SeeAlso: null
  Synopsis: Print the client and server version information

